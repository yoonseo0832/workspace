<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.ArrayList, model.vo.Student"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSTL - core</title>
</head>
<body>
	<h1>JSTL Core Library</h1>
	
	<h3>* 변수</h3>
	<pre>
		- 변수 산언과 동시에 초기화 (c:set var="변수명" value="값" [scope="저장객체"])
		
			+ 해당 변수의 저장된 값을 어떤 scope에 setAttribute를 통해서 담아둘 지 결정
			+ 변수 선언하고 초기화 기능까지를 제공
			=> c:set 으로 선언한 변수는 반드시 EL로 접근해야함 
	</pre>
	<!-- scope 지정생략하면 가장 작은 범위인 page scope에 저장ㄴ -->
	<!-- num1 이라는 변수에 10 이라는 값 저장 -->
	<c:set var="num1" value="10"></c:set>
	
	<!-- request 영역에 num2 변수에 20 값 저장 -->
	<c:set var="num2" value="20" scope="request"></c:set>
	
	<p> num1: ${num1 }</p>
	<p> num2: ${num2 }</p>
	
	<%--num1 과 num2의 합을 addNum 변수에 저장, session 영역에 저장 --%>
	<c:set var="addNum" value="${num1+num2 }" scope="session"></c:set>
	<p> addNum: ${addNum} </p>
	
	<c:set var="temp">
		9999
	</c:set>
	<p> temp: ${temp }</p>
	<%--value 속성 대신, 시작 태그와 종료태그 사이에 초기값을 지정할 수 있음 --%>
	
	<pre>
		- 변수 삭제 : (c:remove var="삭제할 변수명" [scope="삭제하고자하는 영역 지정 가능"])
			+ 해당 scope 영역에 저장되어 있는 변수를 찾아 제거하는 태그
				=> .removeAttribute()를 사용하여 제거하는 것과 동일하게 처리됨
				+ scope 속성 생략 시 해당 이름의 변수의 값 모두 제거됨
	</pre>
	<%--addNum 변수 삭제 --%>
	<p> addNum: ${addNum} </p>
	<c:remove var="addNum" scope="session"></c:remove>
	<p> 제거 후 addNum: ${addNum} </p>
	
	<c:set var="temp" value="1111"></c:set>
	<c:set var="temp" value="2222" scope="request"></c:set>
	
	<p> page scope에 저장된 temp : ${temp}</p>
	<p> request scope에 저장된 temp : ${requestScope.temp}</p>
	
	<c:remove var="temp" />
	
	<p> temp 제거후 page scope에 저장된 temp : ${pageScope.temp}</p>
	<p> temp 제거후 request scope에 저장된 temp : ${requestScope.temp}</p>
	
	<pre>
		- 변수 (데이터) 출력 : (c:out value="출력하고자 하는 값" [default="기본값"] [escapeXml="true|false"])
	</pre>
	<c:out value="테스트" />
	
	<%-- addNum 변수의 값을 출력 --%>
	<c:out value="${ addNum } " />
	<c:out value="${ addNum }" default="데이터 없음" />
	<%-- outData 변수에 '<b>강조태크</b>' --%> 
	<c:set var="outData" value="<b>강조태크</b>" />
	<c:out value="${outData }" />
	<br>
	<c:out value="${outData }" escapeXml="true" />
	<%-- escapeXml의 기본값은 true --%>
	<br>
	<c:out value="${outData }" escapeXml="false" />
	<%-- escapeXml의 false로 하니 태그가 적용됨 --%>
	
	<hr>
	
	<h3>* 조건문 - if (c:if test="조건식")</h3>
	<pre>
		- java의 if문과 비슷한 역할을 하는 태그
		- 조건식은 test 속성에 EL 구문을 사용하여 작성
	</pre>
	<%--num1 > num2 큰가? --%>
	<%-- * JSTL로 선언된 변수는 접근 불가 (EL로만 접근 가능)
	<% if(num1 > num2){ %>
	<%} %>
	--%>
	<c:if test="${num1>num2 }">
		num1이 num2보다 큽니다.
	</c:if>
	<c:if test="${num1 lt num2 }">
		num1이 num2보다 작습니다.
	</c:if>
	<br>
	<c:set var="hi" value="안녕" />
	<c:if test="${hi eq '안녕' }">
		hi~hi~hi~
	</c:if>
	<c:if test="${hi ne '안녕' }">
		bye~bye~
	</c:if>
	<br>
	
	<h3>* 조건문 - choose(c:choose, c:when, c:otherwise)</h3>
	<pre>
		- java에서 if ~else, if~ else if문과 비슷하게 동작되는 태그
		- 구조
			+ c:choose 하위 요소로 c:when, c:otherwise
			
			c:choose
				c:when /c:when
				c:otherwise  /c:otherwise
			/c:choose
	</pre>
	<%--hi변수의 값 '안녕' --%>
	<c:choose>
		<c:when test="${hi eq '안녕' }" >
			hi~hi~hi
		</c:when>
		<c:otherwise>
			bye~bye~
		</c:otherwise>
	</c:choose>
	<br>
	<%--num1 20보다 크다 --%>
	<c:choose>
		<c:when test="${num1 >20 }" >
			<h2>num1이 20보다 크다</h2>
		</c:when>
		<c:when test="${num1 >= 10 }">
			<h3>10보다 크거나 같다</h3>
		</c:when>
		<c:otherwise>
			<h3>10보다 크거나 같다</h3>
		</c:otherwise>
	</c:choose>
	
	<hr>
	
	<h3>* 반복문 - (c:forEach)</h3>
	<pre>
		- for loop문
			- step 생략 시 기본적으로 1씩 증가 
			c:forEach var="변수명" begin="초기값/시작값" end="끝값" [step="증가값"]
		- 향상된 for문
			c:forEach var="변수명" items="배열|컬렉션(순차적으로 접근하고자 하는 객체)" [varStatus="현재 접근되 요소의 상태값을 보관하는 변수명"]
	</pre>
	<%-- 스크립틀릿을 사용하여 1~10까지 출력(한줄로) --%>
	<% for(int i=1; i<=10; i++){ %>
		<p><%=i %></p>
	<%} %>
	
	<hr>
	
	<c:forEach var="i" begin="1" end="10" >
		<p> ${i}</p>
	</c:forEach>
	
	<hr>
	
	<%--h1 ~ h6 태그를 출력, "나는 hn 태그야" --%>
	<c:forEach var="h" begin="1" end="6">
		<h${h }> 나는 h${h} 태그야</h${h }>
	</c:forEach>
	
	<c:set var="fruits">
	<%--문자열은 ,를 기준으로 문자열을 나눔 --%>
		딸기, 오렌지, 수박, 망고, 체리
	</c:set>
	* fruits에 저장된 값: ${fruits }
	<ul>
		<c:forEach var="f" items="${fruits}">
			<li>${f}</li>
		</c:forEach>
	</ul>
	<%--
		colors 변수 4가지 색상을 ,로 구분하여 저장
		목록태그로 해당 글자를 출력(저장된 컬러로 글자색 변경)
	 --%>
	<c:set var="colors">
		red, blue, purple, green
	</c:set>
	* color에 저장된 값: ${colors }
	<ul>
		<c:forEach var="c" items="${colors }">
			<li style="color: ${c};">${c}</li>
		</c:forEach>
	</ul>
	<%
		ArrayList<Student> list = new ArrayList<>();
		list.add(new Student("박민준", 20, "남자"));
		list.add(new Student("임성준", 20, "남자"));
		list.add(new Student("안민영", 20, "남자"));
		list.add(new Student("이윤서", 23, "여자"));
	%>
	<%-- request.setAttribute("list", list) --%>
	<c:set var="list" value="<%=list %>" scope="request" />
	<table border="1">
		<thead>
			<tr>
				<th>No</th>
				<th>이름</th>
				<th>나이</th>
				<th>성별</th>
			</tr>
		</thead>
		<tbody>
			<c:choose>
				<c:when test="${ empty list }">
					<tr>
						<td colspan="4">조회된 결과가 없습니다</td>
					</tr>
				</c:when>
				<c:otherwise>
					<c:forEach var="l" items="${list}" varStatus="vs">
						<tr>
							<!--  <td>${vs.index +1}</td>-->
							<%-- index: 0부터 시작,  count: 1부터 시작  --%>
							<td>${vs.count }</td>
							<td>${l.name }</td>
							<td>${l.age }</td>
							<td>${l.gender }</td>
						</tr>
					</c:forEach>
				</c:otherwise>
			</c:choose> 
		</tbody>
	</table>
	
	<hr>
	
	<h3>* 반복문 - forTokens</h3>
	<pre>
		특정 구분자를 통해서 순차적으로 접근하고자 할때 사용
		
		c:forTokens var="변수명" items="분리하고자하는 대상(문자열)" delims="구분자"
		
		- 구분자를 통해서 분리된 각각의 값에 순차적으로 접근하여 반복문 수행
		- 콤마(,)가 아닌 다른 구분자를 사용하고자 할때
		- java에서 문자열.split("구분자") 또는 StringTokenizer 와 비슷
	</pre>
	<%-- movies 라는 변수에 영화 5개 저장 (구분자: / . ,) --%>
	<c:set var="movies" value="극한직업/주유소습격사건,아이언맨.고독한미식가/슈츠" />	
	<h4>영화 목록</h4>
	<ol>
		<c:forEach var="m" items="${movies }">
			<li>${m }</li>
		</c:forEach>
	</ol>
	
	<ol>
		<c:forTokens var="m" items="${movies}" delims="/.,">
			<li>${m }</li>
		</c:forTokens>
	</ol>
	
	<hr>
	
	<h3>* url, query string 관련 - c:url, c:param</h3>
	
	<pre>
		- url 경로를 생성하고, query string를 정의해둘 수 있는 태그
		
		c:url var="변수명" value="요청할 url"
			c:param name="키값" value="데이터"/
			c:param name="키값" value="데이터"/
			c:param name="키값" value="데이터"/
			...
		/c:url
	</pre>
	
	
	
	
	
	
	
	
	
</body>
</html>