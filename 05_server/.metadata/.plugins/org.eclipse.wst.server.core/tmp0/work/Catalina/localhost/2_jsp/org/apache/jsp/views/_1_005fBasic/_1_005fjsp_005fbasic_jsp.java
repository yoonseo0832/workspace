/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-03-21 05:03:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views._1_005fBasic;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1_005fjsp_005fbasic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>1_jsp_basic 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>* JSP Element 표현법(JSP 문법)</h2>\r\n");
      out.write("\r\n");
      out.write("    <h3>1) JSP 스크립트 원소</h3>\r\n");
      out.write("    <p>\r\n");
      out.write("        JSP 페이지에서 자바코드를 기술할 수 있는 문법(기능)\r\n");
      out.write("    </p>\r\n");
      out.write("    <ol>\r\n");
      out.write("        <li>\r\n");
      out.write("            스크립틀릿 : &lt;% %&gt; <br> <!--&nbsp; 공백을 표현하는 특수문자, < less than, > greater than-->\r\n");
      out.write("            자바 코드를 사용하기 위한 문법(변수 선언, 제어문 사용,...)\r\n");
      out.write("        </li>\r\n");
      out.write("        <li>\r\n");
      out.write("            표현식(출력식) : &lt;%= %&gt;<br>\r\n");
      out.write("            값을 화면 상에 출력하기 위한 문법(변수, 메소드 호출, ...)\r\n");
      out.write("        </li>\r\n");
      out.write("        <li>\r\n");
      out.write("            선언문 : &lt;%! %&gt;<br>\r\n");
      out.write("            멤버 변수, 메소드 선언하기 위한 문법\r\n");
      out.write("        </li>\r\n");
      out.write("    </ol>\r\n");
      out.write("    <a href=\"2_scriptElement.jsp\">views detail..</a>\r\n");
      out.write("    <br><hr>\r\n");
      out.write("    <h3>2) 지시어</h3>\r\n");
      out.write("    <p>\r\n");
      out.write("        JSP 페이지 전체에 영향을 미치는 설정(정보)를 작성할 때 사용<br>\r\n");
      out.write("        &lt;%@ page | include | taglib  속성=\"속성값\" 속성=\"속성값\".. %&gt;\r\n");
      out.write("    </p>\r\n");
      out.write("    <ol>\r\n");
      out.write("        <li>\r\n");
      out.write("            page 지시어 : 현재 jsp 페이지를 처리할 때 필요한 속성들을 작성\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li>language : 사용할 언어 유형 지정 속성</li>\r\n");
      out.write("                <li>contentType : 해당 페이지의 문서 유형, 인코딩 설정</li>\r\n");
      out.write("                <li>pageEncoding : 해당 페이지 내에 작성된 자바코드의 인코딩 설정</li>\r\n");
      out.write("                <li>import : 자바에서의 import와 동일, 같은 의미</li>\r\n");
      out.write("                <li>errorPage : 현재 페이지에서 오류가 발생했을 때 보여줄 에러페이지 경로 설정</li>\r\n");
      out.write("            </ul>\r\n");
      out.write("            <a href=\"3_directivePage.jsp\">views detail..</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li>\r\n");
      out.write("            include 지시어 : 현재 jsp 페이지 내에 또 다른 jsp 페이지를 포함시키고자 할 때<br>\r\n");
      out.write("            <a href=\"4_directivePage.jsp\">views detail...</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li>\r\n");
      out.write("        	taglib 지시어: JSP 기능을 확장시킬 수 있는 추가적인 라이브러리를 등록할 때 사용됨\r\n");
      out.write("        </li>\r\n");
      out.write("    </ol>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
