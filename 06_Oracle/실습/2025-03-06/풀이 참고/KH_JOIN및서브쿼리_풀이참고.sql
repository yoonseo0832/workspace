-- KH_연습문제
-- 1. 2025년 12월 25일의 요일 조회
SELECT TO_CHAR( TO_DATE('20251225'), 'DAY' ) FROM DUAL;

-- 2. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과, 주민번호, 부서명, 직급 조회
-- * 오라클 전용 구문 *
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE, DEPARTMENT, JOB
WHERE DEPT_CODE = DEPT_ID                   -- EMPLOYEE 테이블과 DEPARTMENT 테이블 연결
    AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE        -- EMPLOYEE 테이블과 JOB 테이블 연결
    AND SUBSTR(EMP_NO, 1, 2) BETWEEN 70 AND 79  -- 70년대 생에 대한 조건
    AND SUBSTR(EMP_NO, 8, 1) = 2            -- 여자에 대한 조건
    AND EMP_NAME LIKE '전%';                 -- 전씨 성에 대한 조건
      
-- * ANSI 구문 *
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID  -- EMPLOYEE 테이블과 DEPARTMENT 테이블 연결
    JOIN JOB USING (JOB_CODE)               -- EMPLOYEE 테이블과 JOB 테이블 연결
WHERE SUBSTR(EMP_NO, 1, 2) BETWEEN 70 AND 79  -- 70년대 생에 대한 조건
    AND SUBSTR(EMP_NO, 8, 1) = 2            -- 여자에 대한 조건
    AND EMP_NAME LIKE '전%';                 -- 전씨 성에 대한 조건
    
-- 3. 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
SELECT EMP_ID, EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER('19' || SUBSTR(EMP_NO, 1, 2)) 나이
        , DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN JOB USING (JOB_CODE)
WHERE EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER('19' || SUBSTR(EMP_NO, 1, 2))
    =   ( SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER('19' || SUBSTR(EMP_NO, 1, 2)))
          FROM EMPLOYEE );


SELECT EMP_ID, EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - TO_NUMBER('19' || SUBSTR(EMP_NO, 1, 2)) 나이
        , DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN JOB USING (JOB_CODE)
WHERE SUBSTR(EMP_NO, 1, 2)
    =   ( SELECT MAX(SUBSTR(EMP_NO, 1, 2))
          FROM EMPLOYEE );

-- 4. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';
 
-- 5. 부서 코드가 D5이거나 D6인 사원의 사원 명, 직급, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN JOB USING (JOB_CODE)
WHERE DEPT_CODE IN ('D5', 'D6');
 
-- 6. 보너스를 받는 사원의 사원 명, 보너스, 부서 명, 지역 명 조회
SELECT EMP_NAME, BONUS, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN JOB USING (JOB_CODE)
WHERE BONUS IS NOT NULL;

-- 7. 사원 명, 직급, 부서 명, 지역 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN JOB USING (JOB_CODE)
    JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;
    

 
-- 8. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회 
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
    JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
    JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
    JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국', '일본');


-- 9. 한 사원과 같은 부서에서 일하는 사원의 이름 조회
SELECT E1.DEPT_CODE "부서코드", E1.EMP_NAME "사원1 이름", E2.EMP_NAME "사원2 이름"
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.DEPT_CODE = E2.DEPT_CODE
    AND E1.EMP_NAME <> E2.EMP_NAME;

 
-- 10. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급, 급여 조회 (NVL 이용)
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
    JOIN JOB USING (JOB_CODE)
WHERE NVL(BONUS, 0) = 0 AND JOB_CODE IN ('J4', 'J7');
 
-- 11. 퇴사 하지 않은 사람과 퇴사한 사람의 수 조회
SELECT DECODE(ENT_YN, 'Y', '퇴사한 사람의 수', '퇴사하지 않은 사람의 수') "분류"
        , COUNT(*)
FROM EMPLOYEE
GROUP BY ENT_YN;

 
-- 12. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회
SELECT * 
FROM (
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE
            , RANK() OVER(ORDER BY(SALARY + (SALARY * NVL(BONUS, 0))*12) DESC) "순위"
    FROM EMPLOYEE
        JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
        JOIN JOB USING (JOB_CODE)
)
WHERE 순위 <= 5;
 
-- 13. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
--	13-1. JOIN과 HAVING 사용
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > ( SELECT MAX(SALARY) * 0.2
                         FROM EMPLOYEE );
                      
--	13-2. 인라인 뷰 사용
SELECT DEPT_TITLE, SSAL
FROM ( SELECT DEPT_TITLE, SUM(SALARY) SSAL
         FROM EMPLOYEE
            JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
         GROUP BY DEPT_TITLE )
WHERE SSAL > ( SELECT MAX(SALARY) * 0.2 FROM EMPLOYEE );

--	13-3. WITH 사용
--        서브쿼리에 이름을 붙여주는 방법. 동일한 서브쿼리를 여러 번 사용할 경우 사용!
WITH DEPT_SAL AS ( SELECT DEPT_TITLE, SUM(SALARY) SSAL
                        FROM EMPLOYEE
                        JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
                    GROUP BY DEPT_TITLE )
SELECT DEPT_TITLE, SSAL
  FROM DEPT_SAL
 WHERE SSAL > ( SELECT MAX(SALARY) * 0.2 FROM EMPLOYEE );
 
-- 14. 부서 명과 부서 별 급여 합계 조회
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
GROUP BY DEPT_TITLE;