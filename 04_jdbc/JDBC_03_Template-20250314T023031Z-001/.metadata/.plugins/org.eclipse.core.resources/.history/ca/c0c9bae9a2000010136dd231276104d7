package com.kh.model.dao;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.InvalidPropertiesFormatException;
import java.util.Properties;

import com.kh.common.JDBCTemplate;
import com.kh.model.vo.Member;

/*
 * DAO (Database Access Object)
 * : DB에 직접 접근하여 사용자의 요청에 맞는 SQL문 실행 후 결과 반환
 *   --> JDBC 사용
 */
public class MemberDao {
	// * 기존 상수 필드 정보는 JDBCTemplate 클래스에서 사용되어 제거 *
	
	private Properties prop = new Properties();
	public MemberDao() {
		prop.loadFromXML(new FileInputStream("resources/query.xml"));
	}
	/**
	 * 회원 정보 추가 메소드
	 * @param conn 생성되어 있는 Connection 객체
	 * @param m 회원 정보가 저장된 Member 객체
	 * @return 처리된 결과(처리된 행 수)
	 */
	public int insertMember(Connection conn, Member m) {
		int result = 0;
		
		// 1) jdbc driver 등록		-- Service 객체가 완료
		// 2) Connection 객체 생성    -- Service 객체가 완료
		// ----------------------------------------------
		PreparedStatement pstmt = null;
		try {
			// 3) Statement 객체 생성
			/*
			String sql = "INSERT INTO MEMBER "
					   + " VALUES (SEQ_MNO.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE)";
					   */
			
			
			String sql = prop.getProperty("insertMember");
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, m.getMemberId());
			pstmt.setString(2, m.getMemberPw());
			pstmt.setString(3, m.getGender());
			pstmt.setInt(4, m.getAge());
			pstmt.setString(5, m.getEmail()); 	// 이메일
			pstmt.setString(6, m.getAddress()); // 주소
			pstmt.setString(7, m.getPhone());	// 연락처
			pstmt.setString(8, m.getHobby());   // 취미
			
			// 4) SQL문 실행 5) 결과 받기
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (InvalidPropertiesFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// 6) 결과에 대한 처리:트랜잭션처리	--> Service 객체에서 담당
			// 7) 자원 반납
			JDBCTemplate.close(pstmt);
		}
		return result;
	}

	/**
	 * 전체 회원에 대한 정보를 DB에서 조회
	 * @param conn Connection 객체
	 * @return 조회된 결과(회원목록)
	 */
	public ArrayList<Member> selectAll(Connection conn) {
		ArrayList<Member> list = new ArrayList<>();
		
		// 1) jdbc driver 등록
		// 2) Connection 객체 생성  ---> Service 객체에서 처리되어 있음
		
		// 3) Statement 객체 생성
		String query = "SELECT * FROM MEMBER ORDER BY MEMBERID";
		try ( PreparedStatement pstmt = conn.prepareStatement(query); 
				ResultSet rset = pstmt.executeQuery(); ) {
			// 4) 실행 후 결과를 받기
			// -> try~with~resource문 사용 시 자원 관리를 자동으로 해줌! 
		
			// 5) 결과 처리
			while(rset.next()) {	// 조회된 결과가 있는 지 확인
				Member m = new Member(
									rset.getInt("memberno")
									, rset.getString("memberid")
									, rset.getString(3)
									, rset.getString("GENDER")
									, rset.getInt("AGE")
									, rset.getString("email")
									, rset.getString("ADDRESS")
									, rset.getString(8)
									, rset.getString("hobby")
									, rset.getDate(10)
									);
				list.add(m);
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		// 6) 자원 반납 => 생략 __ try ~ with ~ resource문을 사용하여 생략 가능!
		
		return list;
	}

	/**
	 * 전달받은 아이디로 DB에 포함하고 있는 데이터가 있는 지 조회
	 * @param conn		생성된 Connection 객체
	 * @param searchId	검색할 회원 아이디
	 * @return			검색 결과
	 */
	public ArrayList<Member> searchById(Connection conn, String searchId) {
		ArrayList<Member> list = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		// * Statement 객체 생성
		String query = "SELECT * FROM MEMBER WHERE MEMBERID LIKE '%'||?||'%'";
		try { 
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, searchId);		
			// * 쿼리문 실행 후 결과 받기
			rset = pstmt.executeQuery();				
		
			// * 결과에 처리
			while(rset.next()) {	// 데이터가 있는 지 확인
				Member m = new Member(rset.getInt("memberno")
									, rset.getString("memberid")
									, rset.getString(3)
									, rset.getString("GENDER")
									, rset.getInt("AGE")
									, rset.getString("email")
									, rset.getString("ADDRESS")
									, rset.getString(8)
									, rset.getString("hobby")
									, rset.getDate(10)
									);
				list.add(m);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// * 현재 메소드에서 생성한 객체 반납
			JDBCTemplate.close(rset);
			JDBCTemplate.close(pstmt);
		}
		// * 결과 반환
		return list;
	}
	
	/**
	 * 전달된 회원 정보를 아이디 기준으로 수정(업데이트) 
	 * @param conn	Connection 객체
	 * @param m		수정할 회원 정보를 담은 Member 객체
	 * @return		처리 결과
	 */
	public int updateMember(Connection conn, Member m) {
		PreparedStatement stmt = null;
		
		int result = 0;
		
		String sql = "UPDATE MEMBER "
				     +  "SET MEMBERPW = ?, GENDER = ?, ADDRESS = ?, HOBBY = ? "
				     +"WHERE MEMBERID = ?";
		try {
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, m.getMemberPw());
			stmt.setString(2, m.getGender());
			stmt.setString(3, m.getAddress());
			stmt.setString(4, m.getHobby());
			stmt.setString(5, m.getMemberId());
			
			result = stmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBCTemplate.close(stmt);
		}
		
		return result;
	}

	/**
	 * DB에서 해당 회원에 대한 데이터를 삭제 처리
	 * @param conn		생성된 Connection 객체
	 * @param id		삭제할 회원 아이디
	 * @return			처리 결과
	 */
	public int deleteMember(Connection conn, String id) {
		int result = 0;
		PreparedStatement pstmt = null;
		
		// * DML(delete)
		try {
			
			String sql = "DELETE FROM MEMBER WHERE MEMBERID = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id);
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBCTemplate.close(pstmt);
		}
		
		return result;
	}
}








